{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js"],"names":["DataSource","isDataSource","value","connect","ArrayDataSource","_data","_DisposeViewRepeaterStrategy","changes","viewContainerRef","itemContextFactory","itemValueResolver","itemViewChanged","forEachOperation","record","adjustedPreviousIndex","currentIndex","view","operation","previousIndex","insertContext","createEmbeddedView","templateRef","context","index","remove","get","move","_RecycleViewRepeaterStrategy","viewCacheSize","_viewCache","viewArgsFactory","_insertView","_detachAndCacheView","_moveView","destroy","cachedView","_insertViewFromCache","$implicit","undefined","viewArgs","detachedView","_detachView","_maybeCacheView","length","push","indexOf","pop","insert","detach","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","forEach","_markSelected","values","_verifyValueAssignment","_emitChangeEvent","_unmarkSelected","isSelected","deselect","select","_unmarkAll","has","size","isEmpty","predicate","selected","_selected","sort","next","source","added","removed","add","ngDevMode","getMultipleValuesInSingleSelectionError","Array","from","Error","UniqueSelectionDispatcher","_listeners","id","name","listener","filter","registered","ɵfac","UniqueSelectionDispatcher_Factory","t","ɵprov","factory","token","providedIn","type","args","_VIEW_REPEATER_STRATEGY"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;;;;;;;;;UAQMA,U;;;AAEN;;;AACA,eAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA;AACA;AACA,eAAOA,KAAK,IAAI,OAAOA,KAAK,CAACC,OAAb,KAAyB,UAAzC;AACH;AAED;;;;;;;;AAOA;;;UACMC,e;;;;;AACF,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf;AACA,gBAAKA,KAAL,GAAaA,KAAb;AAFe;AAGlB;;;;oCACS;AACN,mBAAO,0DAAa,KAAKA,KAAlB,IAA2B,KAAKA,KAAhC,GAAwC,gDAAG,KAAKA,KAAR,CAA/C;AACH;;;uCACY,CAAG;;;;QARUL,U;AAW9B;;;;;;;;AAQA;;;;;;;;AAOA;;;;;;;;;;;UASMM,4B;;;;;;;uCACWC,O,EAASC,gB,EAAkBC,kB,EAAoBC,iB,EAAmBC,e,EAAiB;AAC5FJ,mBAAO,CAACK,gBAAR,CAAyB,UAACC,MAAD,EAASC,qBAAT,EAAgCC,YAAhC,EAAiD;AACtE,kBAAIC,IAAJ;AACA,kBAAIC,SAAJ;;AACA,kBAAIJ,MAAM,CAACK,aAAP,IAAwB,IAA5B,EAAkC;AAC9B,oBAAMC,aAAa,GAAGV,kBAAkB,CAACI,MAAD,EAASC,qBAAT,EAAgCC,YAAhC,CAAxC;AACAC,oBAAI,GAAGR,gBAAgB,CAACY,kBAAjB,CAAoCD,aAAa,CAACE,WAAlD,EAA+DF,aAAa,CAACG,OAA7E,EAAsFH,aAAa,CAACI,KAApG,CAAP;AACAN,yBAAS,GAAG;AAAE;AAAd;AACH,eAJD,MAKK,IAAIF,YAAY,IAAI,IAApB,EAA0B;AAC3BP,gCAAgB,CAACgB,MAAjB,CAAwBV,qBAAxB;AACAG,yBAAS,GAAG;AAAE;AAAd;AACH,eAHI,MAIA;AACDD,oBAAI,GAAGR,gBAAgB,CAACiB,GAAjB,CAAqBX,qBAArB,CAAP;AACAN,gCAAgB,CAACkB,IAAjB,CAAsBV,IAAtB,EAA4BD,YAA5B;AACAE,yBAAS,GAAG;AAAE;AAAd;AACH;;AACD,kBAAIN,eAAJ,EAAqB;AACjBA,+BAAe,CAAC;AACZW,yBAAO,EAAEN,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACM,OAD9C;AAEZL,2BAAS,EAATA,SAFY;AAGZJ,wBAAM,EAANA;AAHY,iBAAD,CAAf;AAKH;AACJ,aAxBD;AAyBH;;;mCACQ,CACR;;;;;AAGL;;;;;;;;AAOA;;;;;;;;;;;;;UAWMc,4B;AACF,gDAAc;AAAA;;AACV;;;;AAIA,eAAKC,aAAL,GAAqB,EAArB;AACA;;;;;;;;AAOA,eAAKC,UAAL,GAAkB,EAAlB;AACH;AACD;;;;;uCACatB,O,EAASC,gB,EAAkBC,kB,EAAoBC,iB,EAAmBC,e,EAAiB;AAAA;;AAC5F;AACAJ,mBAAO,CAACK,gBAAR,CAAyB,UAACC,MAAD,EAASC,qBAAT,EAAgCC,YAAhC,EAAiD;AACtE,kBAAIC,IAAJ;AACA,kBAAIC,SAAJ;;AACA,kBAAIJ,MAAM,CAACK,aAAP,IAAwB,IAA5B,EAAkC;AAAE;AAChC,oBAAMY,eAAe,GAAG,SAAlBA,eAAkB;AAAA,yBAAMrB,kBAAkB,CAACI,MAAD,EAASC,qBAAT,EAAgCC,YAAhC,CAAxB;AAAA,iBAAxB;;AACAC,oBAAI,GAAG,MAAI,CAACe,WAAL,CAAiBD,eAAjB,EAAkCf,YAAlC,EAAgDP,gBAAhD,EAAkEE,iBAAiB,CAACG,MAAD,CAAnF,CAAP;AACAI,yBAAS,GAAGD,IAAI,GAAG;AAAE;AAAL,kBAAsB;AAAE;AAAxC;AACH,eAJD,MAKK,IAAID,YAAY,IAAI,IAApB,EAA0B;AAAE;AAC7B,sBAAI,CAACiB,mBAAL,CAAyBlB,qBAAzB,EAAgDN,gBAAhD;;AACAS,yBAAS,GAAG;AAAE;AAAd;AACH,eAHI,MAIA;AAAE;AACHD,oBAAI,GAAG,MAAI,CAACiB,SAAL,CAAenB,qBAAf,EAAsCC,YAAtC,EAAoDP,gBAApD,EAAsEE,iBAAiB,CAACG,MAAD,CAAvF,CAAP;AACAI,yBAAS,GAAG;AAAE;AAAd;AACH;;AACD,kBAAIN,eAAJ,EAAqB;AACjBA,+BAAe,CAAC;AACZW,yBAAO,EAAEN,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACM,OAD9C;AAEZL,2BAAS,EAATA,SAFY;AAGZJ,wBAAM,EAANA;AAHY,iBAAD,CAAf;AAKH;AACJ,aAvBD;AAwBH;;;mCACQ;AAAA,uDACc,KAAKgB,UADnB;AAAA;;AAAA;AACL,kEAAoC;AAAA,oBAAzBb,IAAyB;AAChCA,oBAAI,CAACkB,OAAL;AACH;AAHI;AAAA;AAAA;AAAA;AAAA;AAIR;AACD;;;;;;;sCAIYJ,e,EAAiBf,Y,EAAcP,gB,EAAkBN,K,EAAO;AAChE,gBAAIiC,UAAU,GAAG,KAAKC,oBAAL,CAA0BrB,YAA1B,EAAwCP,gBAAxC,CAAjB;;AACA,gBAAI2B,UAAJ,EAAgB;AACZA,wBAAU,CAACb,OAAX,CAAmBe,SAAnB,GAA+BnC,KAA/B;AACA,qBAAOoC,SAAP;AACH;;AACD,gBAAMC,QAAQ,GAAGT,eAAe,EAAhC;AACA,mBAAOtB,gBAAgB,CAACY,kBAAjB,CAAoCmB,QAAQ,CAAClB,WAA7C,EAA0DkB,QAAQ,CAACjB,OAAnE,EAA4EiB,QAAQ,CAAChB,KAArF,CAAP;AACH;AACD;;;;8CACoBA,K,EAAOf,gB,EAAkB;AACzC,gBAAMgC,YAAY,GAAG,KAAKC,WAAL,CAAiBlB,KAAjB,EAAwBf,gBAAxB,CAArB;;AACA,iBAAKkC,eAAL,CAAqBF,YAArB,EAAmChC,gBAAnC;AACH;AACD;;;;oCACUM,qB,EAAuBC,Y,EAAcP,gB,EAAkBN,K,EAAO;AACpE,gBAAMc,IAAI,GAAGR,gBAAgB,CAACiB,GAAjB,CAAqBX,qBAArB,CAAb;AACAN,4BAAgB,CAACkB,IAAjB,CAAsBV,IAAtB,EAA4BD,YAA5B;AACAC,gBAAI,CAACM,OAAL,CAAae,SAAb,GAAyBnC,KAAzB;AACA,mBAAOc,IAAP;AACH;AACD;;;;;;;0CAIgBA,I,EAAMR,gB,EAAkB;AACpC,gBAAI,KAAKqB,UAAL,CAAgBc,MAAhB,GAAyB,KAAKf,aAAlC,EAAiD;AAC7C,mBAAKC,UAAL,CAAgBe,IAAhB,CAAqB5B,IAArB;AACH,aAFD,MAGK;AACD,kBAAMO,KAAK,GAAGf,gBAAgB,CAACqC,OAAjB,CAAyB7B,IAAzB,CAAd,CADC,CAED;AACA;AACA;AACA;;AACA,kBAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdP,oBAAI,CAACkB,OAAL;AACH,eAFD,MAGK;AACD1B,gCAAgB,CAACgB,MAAjB,CAAwBD,KAAxB;AACH;AACJ;AACJ;AACD;;;;+CACqBA,K,EAAOf,gB,EAAkB;AAC1C,gBAAM2B,UAAU,GAAG,KAAKN,UAAL,CAAgBiB,GAAhB,EAAnB;;AACA,gBAAIX,UAAJ,EAAgB;AACZ3B,8BAAgB,CAACuC,MAAjB,CAAwBZ,UAAxB,EAAoCZ,KAApC;AACH;;AACD,mBAAOY,UAAU,IAAI,IAArB;AACH;AACD;;;;sCACYZ,K,EAAOf,gB,EAAkB;AACjC,mBAAOA,gBAAgB,CAACwC,MAAjB,CAAwBzB,KAAxB,CAAP;AACH;;;;;AAGL;;;;;;;;AAOA;;;;;UAGM0B,c;AACF,kCAA6E;AAAA;;AAAA,cAAjEC,SAAiE,uEAArD,KAAqD;;AAAA,cAA9CC,uBAA8C;;AAAA,cAArBC,YAAqB,uEAAN,IAAM;;AAAA;;AACzE,eAAKF,SAAL,GAAiBA,SAAjB;AACA,eAAKE,YAAL,GAAoBA,YAApB;AACA;;AACA,eAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA;;AACA,eAAKC,iBAAL,GAAyB,EAAzB;AACA;;AACA,eAAKC,eAAL,GAAuB,EAAvB;AACA;;AACA,eAAKC,OAAL,GAAe,IAAI,4CAAJ,EAAf;;AACA,cAAIN,uBAAuB,IAAIA,uBAAuB,CAACR,MAAvD,EAA+D;AAC3D,gBAAIO,SAAJ,EAAe;AACXC,qCAAuB,CAACO,OAAxB,CAAgC,UAAAxD,KAAK;AAAA,uBAAI,MAAI,CAACyD,aAAL,CAAmBzD,KAAnB,CAAJ;AAAA,eAArC;AACH,aAFD,MAGK;AACD,mBAAKyD,aAAL,CAAmBR,uBAAuB,CAAC,CAAD,CAA1C;AACH,aAN0D,CAO3D;;;AACA,iBAAKK,eAAL,CAAqBb,MAArB,GAA8B,CAA9B;AACH;AACJ;AACD;;;;;;AAOA;;;mCAGkB;AAAA;;AAAA,8CAARiB,MAAQ;AAARA,oBAAQ;AAAA;;AACd,iBAAKC,sBAAL,CAA4BD,MAA5B;;AACAA,kBAAM,CAACF,OAAP,CAAe,UAAAxD,KAAK;AAAA,qBAAI,MAAI,CAACyD,aAAL,CAAmBzD,KAAnB,CAAJ;AAAA,aAApB;;AACA,iBAAK4D,gBAAL;AACH;AACD;;;;;;qCAGoB;AAAA;;AAAA,+CAARF,MAAQ;AAARA,oBAAQ;AAAA;;AAChB,iBAAKC,sBAAL,CAA4BD,MAA5B;;AACAA,kBAAM,CAACF,OAAP,CAAe,UAAAxD,KAAK;AAAA,qBAAI,MAAI,CAAC6D,eAAL,CAAqB7D,KAArB,CAAJ;AAAA,aAApB;;AACA,iBAAK4D,gBAAL;AACH;AACD;;;;;;iCAGO5D,K,EAAO;AACV,iBAAK8D,UAAL,CAAgB9D,KAAhB,IAAyB,KAAK+D,QAAL,CAAc/D,KAAd,CAAzB,GAAgD,KAAKgE,MAAL,CAAYhE,KAAZ,CAAhD;AACH;AACD;;;;;;kCAGQ;AACJ,iBAAKiE,UAAL;;AACA,iBAAKL,gBAAL;AACH;AACD;;;;;;qCAGW5D,K,EAAO;AACd,mBAAO,KAAKmD,UAAL,CAAgBe,GAAhB,CAAoBlE,KAApB,CAAP;AACH;AACD;;;;;;oCAGU;AACN,mBAAO,KAAKmD,UAAL,CAAgBgB,IAAhB,KAAyB,CAAhC;AACH;AACD;;;;;;qCAGW;AACP,mBAAO,CAAC,KAAKC,OAAL,EAAR;AACH;AACD;;;;;;+BAGKC,S,EAAW;AACZ,gBAAI,KAAKrB,SAAL,IAAkB,KAAKsB,QAA3B,EAAqC;AACjC,mBAAKC,SAAL,CAAeC,IAAf,CAAoBH,SAApB;AACH;AACJ;AACD;;;;;;gDAGsB;AAClB,mBAAO,KAAKrB,SAAZ;AACH;AACD;;;;6CACmB;AACf;AACA,iBAAKuB,SAAL,GAAiB,IAAjB;;AACA,gBAAI,KAAKjB,eAAL,CAAqBb,MAArB,IAA+B,KAAKY,iBAAL,CAAuBZ,MAA1D,EAAkE;AAC9D,mBAAKc,OAAL,CAAakB,IAAb,CAAkB;AACdC,sBAAM,EAAE,IADM;AAEdC,qBAAK,EAAE,KAAKrB,eAFE;AAGdsB,uBAAO,EAAE,KAAKvB;AAHA,eAAlB;AAKA,mBAAKA,iBAAL,GAAyB,EAAzB;AACA,mBAAKC,eAAL,GAAuB,EAAvB;AACH;AACJ;AACD;;;;wCACctD,K,EAAO;AACjB,gBAAI,CAAC,KAAK8D,UAAL,CAAgB9D,KAAhB,CAAL,EAA6B;AACzB,kBAAI,CAAC,KAAKgD,SAAV,EAAqB;AACjB,qBAAKiB,UAAL;AACH;;AACD,mBAAKd,UAAL,CAAgB0B,GAAhB,CAAoB7E,KAApB;;AACA,kBAAI,KAAKkD,YAAT,EAAuB;AACnB,qBAAKI,eAAL,CAAqBZ,IAArB,CAA0B1C,KAA1B;AACH;AACJ;AACJ;AACD;;;;0CACgBA,K,EAAO;AACnB,gBAAI,KAAK8D,UAAL,CAAgB9D,KAAhB,CAAJ,EAA4B;AACxB,mBAAKmD,UAAL,WAAuBnD,KAAvB;;AACA,kBAAI,KAAKkD,YAAT,EAAuB;AACnB,qBAAKG,iBAAL,CAAuBX,IAAvB,CAA4B1C,KAA5B;AACH;AACJ;AACJ;AACD;;;;uCACa;AAAA;;AACT,gBAAI,CAAC,KAAKoE,OAAL,EAAL,EAAqB;AACjB,mBAAKjB,UAAL,CAAgBK,OAAhB,CAAwB,UAAAxD,KAAK;AAAA,uBAAI,MAAI,CAAC6D,eAAL,CAAqB7D,KAArB,CAAJ;AAAA,eAA7B;AACH;AACJ;AACD;;;;;;;iDAIuB0D,M,EAAQ;AAC3B,gBAAIA,MAAM,CAACjB,MAAP,GAAgB,CAAhB,IAAqB,CAAC,KAAKO,SAA3B,KAAyC,OAAO8B,SAAP,KAAqB,WAArB,IAAoCA,SAA7E,CAAJ,EAA6F;AACzF,oBAAMC,uCAAuC,EAA7C;AACH;AACJ;;;8BApHc;AACX,gBAAI,CAAC,KAAKR,SAAV,EAAqB;AACjB,mBAAKA,SAAL,GAAiBS,KAAK,CAACC,IAAN,CAAW,KAAK9B,UAAL,CAAgBO,MAAhB,EAAX,CAAjB;AACH;;AACD,mBAAO,KAAKa,SAAZ;AACH;;;;;AAiHL;;;;;;;AAKA,eAASQ,uCAAT,GAAmD;AAC/C,eAAOG,KAAK,CAAC,yEAAD,CAAZ;AACH;AAED;;;;;;;;AAOA;;;;;;;;;;;UASMC,yB;AACF,6CAAc;AAAA;;AACV,eAAKC,UAAL,GAAkB,EAAlB;AACH;AACD;;;;;;;;;iCAKOC,E,EAAIC,I,EAAM;AAAA,wDACQ,KAAKF,UADb;AAAA;;AAAA;AACb,qEAAsC;AAAA,oBAA7BG,QAA6B;AAClCA,wBAAQ,CAACF,EAAD,EAAKC,IAAL,CAAR;AACH;AAHY;AAAA;AAAA;AAAA;AAAA;AAIhB;AACD;;;;;;;iCAIOC,Q,EAAU;AAAA;;AACb,iBAAKH,UAAL,CAAgB1C,IAAhB,CAAqB6C,QAArB;;AACA,mBAAO,YAAM;AACT,oBAAI,CAACH,UAAL,GAAkB,MAAI,CAACA,UAAL,CAAgBI,MAAhB,CAAuB,UAACC,UAAD,EAAgB;AACrD,uBAAOF,QAAQ,KAAKE,UAApB;AACH,eAFiB,CAAlB;AAGH,aAJD;AAKH;;;wCACa;AACV,iBAAKL,UAAL,GAAkB,EAAlB;AACH;;;;;;AAELD,+BAAyB,CAACO,IAA1B,GAAiC,SAASC,iCAAT,CAA2CC,CAA3C,EAA8C;AAAE,eAAO,KAAKA,CAAC,IAAIT,yBAAV,GAAP;AAAgD,OAAjI;;AACAA,+BAAyB,CAACU,KAA1B,GAAkC,yEAAmB;AAAEC,eAAO,EAAE,SAASH,iCAAT,GAA6C;AAAE,iBAAO,IAAIR,yBAAJ,EAAP;AAAyC,SAAnG;AAAqGY,aAAK,EAAEZ,yBAA5G;AAAuIa,kBAAU,EAAE;AAAnJ,OAAnB,CAAlC;AACA;;AAAc,OAAC,YAAY;AAAE,wEAAyBb,yBAAzB,EAAoD,CAAC;AAC1Ec,cAAI,EAAE,wDADoE;AAE1EC,cAAI,EAAE,CAAC;AAAEF,sBAAU,EAAE;AAAd,WAAD;AAFoE,SAAD,CAApD,EAGrB,YAAY;AAAE,iBAAO,EAAP;AAAY,SAHL,EAGO,IAHP;AAGe,OAH9B;AAKd;;;;;;;;AAQA;;;;;;;;AAOA;;;;;;;;AAMA,UAAMG,uBAAuB,GAAG,IAAI,4DAAJ,CAAmB,eAAnB,CAAhC;AAEA;;;;;;;;AAQA;;;AAMA","file":"default~setup-setup-module~tweak-tweak-module-es5.js","sourcesContent":["import { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) { // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* INSERTED */ : 0 /* REPLACED */;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* REMOVED */;\n            }\n            else { // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        let cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = this._detachView(index, viewContainerRef);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /** Detaches the embedded view at the given index. */\n    _detachView(index, viewContainerRef) {\n        return viewContainerRef.detach(index);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}.\n *\n * INTERNAL ONLY - not for public consumption.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map"]}